#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <unistd.h>
#include <time.h>

#define BCM2708_PERI_BASE	0x20000000
#define GPIO_BASE		(BCM2708_PERI_BASE + 0x20000000)
#define PAGE_SIZE		(4*1024)
#define BLOCK_SIZE		(4*1024)

int mem_fd;
void *gpio_map;

volatile unsigned *gpio;

//GPIO setup macros
#define INP_GPIO(g) *(gpio+((g)/10)) &= ~(7<<(((g)%10)*3))
#define OUT_GPIO(g) *(gpio+((g)/10)) |=  (1<<(((g)%10)*3))
#define SET_GPIO_ALT(g,a) *(gpio+(((g)/10))) |= (((a)<=3?(a)+4:(a)==4?3:2)<<(((g)%10)*3))

#define GPIO_SET *(gpio+7)
#define GPIO_CLR *(gpio+10)

#define GPIO_PULL *(gpio+37)
#define GPIO_PULLCLK0 *(gpio+38)

void setup_io();

int main(int argc, char **argv){
int g,rep;

INP_GPIO(11);
OUT_GPIO(11);
INP_GPIO(5);
OUT_GPIO(5);
INP_GPIO(6);
OUT_GPIO(6);
INP_GPIO(13);
OUT_GPIO(13);
INP_GPIO(19);
OUT_GPIO(19);
INP_GPIO(26);
OUT_GPIO(26);

 
}

void setup_io(){
if ((mem_fd = open("/dev/mem", O_RDWR|O_SYNC))<0){
	printf("can't open /dev/mem \n");
	exit(-1);
}
/*mmap GPIO*/
gpio_map = mmap(
	NULL,
	BLOCK_SIZE,
	PROT_READ|PROT_WRITE,
	MAP_SHARED,
	mem_fd,
	GPIO_BASE
);
close(mem_fd);

if (gpio_map == MAP_FAILED){
	printf("mmap error %d\n", (int)gpio_map);
	exit(-1);
}
gpio = (volatile unsigned *)gpio_map;
}
